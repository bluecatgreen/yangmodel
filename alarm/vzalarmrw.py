# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

class vz_augmented_alarm_model_ut(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module vz-augmented.alarm.model.ut - based on the path /vz-augmented.alarm.model.ut. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: this is a sample
  """
  _pyangbind_elements = {}

  

class vz_augmented_alarm_model(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module vz-augmented.alarm.model - based on the path /vz-augmented.alarm.model. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: this is a sample
  """
  _pyangbind_elements = {}

  

class yc_state_alarm_system__alarm_system_alarms_alarm_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module alarm-system - based on the path /alarm-system/alarms/alarm/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for a device alarm
  """
  __slots__ = ('_path_helper', '_extmethods', '__id','__resource','__text','__time_created','__severity','__type_id','__layer','__device_profile','__tid','__object_name','__alarm_ref_id','__type','__class_','__equipment','__AID','__condition_type','__location','__direction','__HiSeverityNotificationCode','__LoSeverityNotificationCode','__ServiceEffect',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__equipment = YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="equipment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)
    self.__layer = YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="layer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model', defining_module='vz-augmented.alarm.model', yang_type='string', is_config=True)
    self.__resource = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="resource", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='string', is_config=True)
    self.__severity = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'MAJOR': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:MAJOR': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'WARNING': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:UNKNOWN': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'UNKNOWN': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:WARNING': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'CRITICAL': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:CRITICAL': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'MINOR': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:MINOR': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}},), is_leaf=True, yang_name="severity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='identityref', is_config=True)
    self.__LoSeverityNotificationCode = YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="LoSeverityNotificationCode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)
    self.__type_id = YANGDynClass(base=[six.text_type,RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'oc-alarm-types:EQPT': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'AIS': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:AIS': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:LOS': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'LOS': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'EQPT': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:OTS': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'OTS': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}},),], is_leaf=True, yang_name="type-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='union', is_config=True)
    self.__text = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="text", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='string', is_config=True)
    self.__ServiceEffect = YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="ServiceEffect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)
    self.__HiSeverityNotificationCode = YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="HiSeverityNotificationCode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)
    self.__direction = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'ut-types:TRMT': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'TRMT': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'NOFIELD_': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:TRMT': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:BTH': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:BTH': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:NA': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:RCV': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:NOFIELD_': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:NOFIELD_': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'NA': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:RCV': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:NA': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'BTH': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'RCV': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}},), is_leaf=True, yang_name="direction", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='identityref', is_config=True)
    self.__time_created = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="time-created", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='oc-types:timeticks64', is_config=True)
    self.__class_ = YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)
    self.__object_name = YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="object-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model', defining_module='vz-augmented.alarm.model', yang_type='string', is_config=True)
    self.__condition_type = YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="condition_type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)
    self.__device_profile = YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="device-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model', defining_module='vz-augmented.alarm.model', yang_type='string', is_config=True)
    self.__tid = YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="tid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model', defining_module='vz-augmented.alarm.model', yang_type='string', is_config=True)
    self.__AID = YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="AID", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)
    self.__alarm_ref_id = YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="alarm_ref_id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'ut-types:ALARM': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ALARM': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:EVENT': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:ALARM': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:EVENT': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'EVENT': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='identityref', is_config=True)
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='string', is_config=True)
    self.__location = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'vz-al-types:NOFIELD': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'FEND': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:NEND': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:FEND': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'NEND': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:FEND': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:NOFIELD': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'NOFIELD': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:NEND': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}},), is_leaf=True, yang_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='identityref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'alarm-system', u'alarms', u'alarm', u'state']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /alarm_system/alarms/alarm/state/id (string)

    YANG Description: Unique ID for the alarm -- this will not be a
configurable parameter on many implementations
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /alarm_system/alarms/alarm/state/id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: Unique ID for the alarm -- this will not be a
configurable parameter on many implementations
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='string', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='string', is_config=True)


  def _get_resource(self):
    """
    Getter method for resource, mapped from YANG variable /alarm_system/alarms/alarm/state/resource (string)

    YANG Description: The item that is under alarm within the device. The
resource may be a reference to an item which is
defined elsewhere in the model. For example, it
may be a platform/component, interfaces/interface,
terminal-device/logical-channels/channel, etc. In this
case the system should match the name of the referenced
item exactly. The referenced item could alternatively be
the path of the item within the model.
    """
    return self.__resource
      
  def _set_resource(self, v, load=False):
    """
    Setter method for resource, mapped from YANG variable /alarm_system/alarms/alarm/state/resource (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resource is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resource() directly.

    YANG Description: The item that is under alarm within the device. The
resource may be a reference to an item which is
defined elsewhere in the model. For example, it
may be a platform/component, interfaces/interface,
terminal-device/logical-channels/channel, etc. In this
case the system should match the name of the referenced
item exactly. The referenced item could alternatively be
the path of the item within the model.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="resource", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resource must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="resource", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='string', is_config=True)""",
        })

    self.__resource = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resource(self):
    self.__resource = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="resource", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='string', is_config=True)


  def _get_text(self):
    """
    Getter method for text, mapped from YANG variable /alarm_system/alarms/alarm/state/text (string)

    YANG Description: The string used to inform operators about the alarm. This
MUST contain enough information for an operator to be able
to understand the problem. If this string contains structure,
this format should be clearly documented for programs to be
able to parse that information
    """
    return self.__text
      
  def _set_text(self, v, load=False):
    """
    Setter method for text, mapped from YANG variable /alarm_system/alarms/alarm/state/text (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_text is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_text() directly.

    YANG Description: The string used to inform operators about the alarm. This
MUST contain enough information for an operator to be able
to understand the problem. If this string contains structure,
this format should be clearly documented for programs to be
able to parse that information
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="text", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """text must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="text", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='string', is_config=True)""",
        })

    self.__text = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_text(self):
    self.__text = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="text", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='string', is_config=True)


  def _get_time_created(self):
    """
    Getter method for time_created, mapped from YANG variable /alarm_system/alarms/alarm/state/time_created (oc-types:timeticks64)

    YANG Description: The time at which the alarm was raised by the system.
This value is expressed as nanoseconds since the Unix Epoch
    """
    return self.__time_created
      
  def _set_time_created(self, v, load=False):
    """
    Setter method for time_created, mapped from YANG variable /alarm_system/alarms/alarm/state/time_created (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_time_created is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_time_created() directly.

    YANG Description: The time at which the alarm was raised by the system.
This value is expressed as nanoseconds since the Unix Epoch
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="time-created", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='oc-types:timeticks64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """time_created must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="time-created", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='oc-types:timeticks64', is_config=True)""",
        })

    self.__time_created = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_time_created(self):
    self.__time_created = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="time-created", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='oc-types:timeticks64', is_config=True)


  def _get_severity(self):
    """
    Getter method for severity, mapped from YANG variable /alarm_system/alarms/alarm/state/severity (identityref)

    YANG Description: The severity level indicating the criticality and impact
of the alarm
    """
    return self.__severity
      
  def _set_severity(self, v, load=False):
    """
    Setter method for severity, mapped from YANG variable /alarm_system/alarms/alarm/state/severity (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_severity is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_severity() directly.

    YANG Description: The severity level indicating the criticality and impact
of the alarm
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'MAJOR': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:MAJOR': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'WARNING': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:UNKNOWN': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'UNKNOWN': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:WARNING': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'CRITICAL': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:CRITICAL': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'MINOR': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:MINOR': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}},), is_leaf=True, yang_name="severity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """severity must be of a type compatible with identityref""",
          'defined-type': "alarm-system:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'MAJOR': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:MAJOR': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'WARNING': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:UNKNOWN': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'UNKNOWN': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:WARNING': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'CRITICAL': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:CRITICAL': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'MINOR': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:MINOR': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}},), is_leaf=True, yang_name="severity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='identityref', is_config=True)""",
        })

    self.__severity = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_severity(self):
    self.__severity = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'MAJOR': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:MAJOR': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'WARNING': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:UNKNOWN': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'UNKNOWN': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:WARNING': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'CRITICAL': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:CRITICAL': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'MINOR': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:MINOR': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}},), is_leaf=True, yang_name="severity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='identityref', is_config=True)


  def _get_type_id(self):
    """
    Getter method for type_id, mapped from YANG variable /alarm_system/alarms/alarm/state/type_id (union)

    YANG Description: The abbreviated name of the alarm, for example LOS,
EQPT, or OTS. Also referred to in different systems as
condition type, alarm identifier, or alarm mnemonic. It
is recommended to use the OPENCONFIG_ALARM_TYPE_ID
identities where possible and only use the string type
when the desired identityref is not yet defined
    """
    return self.__type_id
      
  def _set_type_id(self, v, load=False):
    """
    Setter method for type_id, mapped from YANG variable /alarm_system/alarms/alarm/state/type_id (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type_id() directly.

    YANG Description: The abbreviated name of the alarm, for example LOS,
EQPT, or OTS. Also referred to in different systems as
condition type, alarm identifier, or alarm mnemonic. It
is recommended to use the OPENCONFIG_ALARM_TYPE_ID
identities where possible and only use the string type
when the desired identityref is not yet defined
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[six.text_type,RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'oc-alarm-types:EQPT': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'AIS': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:AIS': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:LOS': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'LOS': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'EQPT': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:OTS': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'OTS': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}},),], is_leaf=True, yang_name="type-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type_id must be of a type compatible with union""",
          'defined-type': "alarm-system:union",
          'generated-type': """YANGDynClass(base=[six.text_type,RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'oc-alarm-types:EQPT': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'AIS': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:AIS': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:LOS': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'LOS': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'EQPT': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:OTS': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'OTS': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}},),], is_leaf=True, yang_name="type-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='union', is_config=True)""",
        })

    self.__type_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type_id(self):
    self.__type_id = YANGDynClass(base=[six.text_type,RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'oc-alarm-types:EQPT': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'AIS': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:AIS': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:LOS': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'LOS': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'EQPT': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'oc-alarm-types:OTS': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}, u'OTS': {u'@namespace': u'http://openconfig.net/yang/alarms/types', u'@module': u'openconfig-alarm-types'}},),], is_leaf=True, yang_name="type-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='union', is_config=True)


  def _get_layer(self):
    """
    Getter method for layer, mapped from YANG variable /alarm_system/alarms/alarm/state/layer (string)

    YANG Description: Alarm Layer origin
    """
    return self.__layer
      
  def _set_layer(self, v, load=False):
    """
    Setter method for layer, mapped from YANG variable /alarm_system/alarms/alarm/state/layer (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_layer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_layer() directly.

    YANG Description: Alarm Layer origin
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="layer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model', defining_module='vz-augmented.alarm.model', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """layer must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="layer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model', defining_module='vz-augmented.alarm.model', yang_type='string', is_config=True)""",
        })

    self.__layer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_layer(self):
    self.__layer = YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="layer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model', defining_module='vz-augmented.alarm.model', yang_type='string', is_config=True)


  def _get_device_profile(self):
    """
    Getter method for device_profile, mapped from YANG variable /alarm_system/alarms/alarm/state/device_profile (string)

    YANG Description: Network Element Name
    """
    return self.__device_profile
      
  def _set_device_profile(self, v, load=False):
    """
    Setter method for device_profile, mapped from YANG variable /alarm_system/alarms/alarm/state/device_profile (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_profile() directly.

    YANG Description: Network Element Name
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="device-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model', defining_module='vz-augmented.alarm.model', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_profile must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="device-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model', defining_module='vz-augmented.alarm.model', yang_type='string', is_config=True)""",
        })

    self.__device_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_profile(self):
    self.__device_profile = YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="device-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model', defining_module='vz-augmented.alarm.model', yang_type='string', is_config=True)


  def _get_tid(self):
    """
    Getter method for tid, mapped from YANG variable /alarm_system/alarms/alarm/state/tid (string)

    YANG Description: NE Name/TI
    """
    return self.__tid
      
  def _set_tid(self, v, load=False):
    """
    Setter method for tid, mapped from YANG variable /alarm_system/alarms/alarm/state/tid (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tid() directly.

    YANG Description: NE Name/TI
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="tid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model', defining_module='vz-augmented.alarm.model', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tid must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="tid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model', defining_module='vz-augmented.alarm.model', yang_type='string', is_config=True)""",
        })

    self.__tid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tid(self):
    self.__tid = YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="tid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model', defining_module='vz-augmented.alarm.model', yang_type='string', is_config=True)


  def _get_object_name(self):
    """
    Getter method for object_name, mapped from YANG variable /alarm_system/alarms/alarm/state/object_name (string)

    YANG Description: Verizon Reporting Object Name
    """
    return self.__object_name
      
  def _set_object_name(self, v, load=False):
    """
    Setter method for object_name, mapped from YANG variable /alarm_system/alarms/alarm/state/object_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_object_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_object_name() directly.

    YANG Description: Verizon Reporting Object Name
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="object-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model', defining_module='vz-augmented.alarm.model', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """object_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="object-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model', defining_module='vz-augmented.alarm.model', yang_type='string', is_config=True)""",
        })

    self.__object_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_object_name(self):
    self.__object_name = YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="object-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model', defining_module='vz-augmented.alarm.model', yang_type='string', is_config=True)


  def _get_alarm_ref_id(self):
    """
    Getter method for alarm_ref_id, mapped from YANG variable /alarm_system/alarms/alarm/state/alarm_ref_id (string)

    YANG Description: Alarm Reference Id in the Alarm inventory
    """
    return self.__alarm_ref_id
      
  def _set_alarm_ref_id(self, v, load=False):
    """
    Setter method for alarm_ref_id, mapped from YANG variable /alarm_system/alarms/alarm/state/alarm_ref_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_alarm_ref_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_alarm_ref_id() directly.

    YANG Description: Alarm Reference Id in the Alarm inventory
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="alarm_ref_id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """alarm_ref_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="alarm_ref_id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)""",
        })

    self.__alarm_ref_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_alarm_ref_id(self):
    self.__alarm_ref_id = YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="alarm_ref_id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /alarm_system/alarms/alarm/state/type (identityref)

    YANG Description: Type alarm or event
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /alarm_system/alarms/alarm/state/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Type alarm or event
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'ut-types:ALARM': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ALARM': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:EVENT': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:ALARM': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:EVENT': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'EVENT': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "vz-augmented.alarm.model.ut:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'ut-types:ALARM': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ALARM': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:EVENT': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:ALARM': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:EVENT': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'EVENT': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='identityref', is_config=True)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'ut-types:ALARM': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ALARM': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:EVENT': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:ALARM': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:EVENT': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'EVENT': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='identityref', is_config=True)


  def _get_class_(self):
    """
    Getter method for class_, mapped from YANG variable /alarm_system/alarms/alarm/state/class (string)

    YANG Description: Alarm Class
    """
    return self.__class_
      
  def _set_class_(self, v, load=False):
    """
    Setter method for class_, mapped from YANG variable /alarm_system/alarms/alarm/state/class (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_class_ is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_class_() directly.

    YANG Description: Alarm Class
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """class_ must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)""",
        })

    self.__class_ = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_class_(self):
    self.__class_ = YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)


  def _get_equipment(self):
    """
    Getter method for equipment, mapped from YANG variable /alarm_system/alarms/alarm/state/equipment (string)

    YANG Description: Component generating the Alarm
    """
    return self.__equipment
      
  def _set_equipment(self, v, load=False):
    """
    Setter method for equipment, mapped from YANG variable /alarm_system/alarms/alarm/state/equipment (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_equipment is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_equipment() directly.

    YANG Description: Component generating the Alarm
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="equipment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """equipment must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="equipment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)""",
        })

    self.__equipment = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_equipment(self):
    self.__equipment = YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="equipment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)


  def _get_AID(self):
    """
    Getter method for AID, mapped from YANG variable /alarm_system/alarms/alarm/state/AID (string)

    YANG Description: Component location in the equipment
    """
    return self.__AID
      
  def _set_AID(self, v, load=False):
    """
    Setter method for AID, mapped from YANG variable /alarm_system/alarms/alarm/state/AID (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_AID is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_AID() directly.

    YANG Description: Component location in the equipment
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="AID", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """AID must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="AID", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)""",
        })

    self.__AID = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_AID(self):
    self.__AID = YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="AID", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)


  def _get_condition_type(self):
    """
    Getter method for condition_type, mapped from YANG variable /alarm_system/alarms/alarm/state/condition_type (string)

    YANG Description: Type of condition causing the alarm
    """
    return self.__condition_type
      
  def _set_condition_type(self, v, load=False):
    """
    Setter method for condition_type, mapped from YANG variable /alarm_system/alarms/alarm/state/condition_type (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_condition_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_condition_type() directly.

    YANG Description: Type of condition causing the alarm
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="condition_type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """condition_type must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="condition_type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)""",
        })

    self.__condition_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_condition_type(self):
    self.__condition_type = YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="condition_type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)


  def _get_location(self):
    """
    Getter method for location, mapped from YANG variable /alarm_system/alarms/alarm/state/location (identityref)

    YANG Description: Far end or near end of the alarm/event
    """
    return self.__location
      
  def _set_location(self, v, load=False):
    """
    Setter method for location, mapped from YANG variable /alarm_system/alarms/alarm/state/location (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_location is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_location() directly.

    YANG Description: Far end or near end of the alarm/event
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'vz-al-types:NOFIELD': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'FEND': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:NEND': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:FEND': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'NEND': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:FEND': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:NOFIELD': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'NOFIELD': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:NEND': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}},), is_leaf=True, yang_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """location must be of a type compatible with identityref""",
          'defined-type': "vz-augmented.alarm.model.ut:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'vz-al-types:NOFIELD': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'FEND': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:NEND': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:FEND': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'NEND': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:FEND': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:NOFIELD': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'NOFIELD': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:NEND': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}},), is_leaf=True, yang_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='identityref', is_config=True)""",
        })

    self.__location = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_location(self):
    self.__location = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'vz-al-types:NOFIELD': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'FEND': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:NEND': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:FEND': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'NEND': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:FEND': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:NOFIELD': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'NOFIELD': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:NEND': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}},), is_leaf=True, yang_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='identityref', is_config=True)


  def _get_direction(self):
    """
    Getter method for direction, mapped from YANG variable /alarm_system/alarms/alarm/state/direction (identityref)

    YANG Description: Receiving /Transmitting or both
    """
    return self.__direction
      
  def _set_direction(self, v, load=False):
    """
    Setter method for direction, mapped from YANG variable /alarm_system/alarms/alarm/state/direction (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_direction is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_direction() directly.

    YANG Description: Receiving /Transmitting or both
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'ut-types:TRMT': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'TRMT': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'NOFIELD_': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:TRMT': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:BTH': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:BTH': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:NA': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:RCV': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:NOFIELD_': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:NOFIELD_': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'NA': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:RCV': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:NA': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'BTH': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'RCV': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}},), is_leaf=True, yang_name="direction", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """direction must be of a type compatible with identityref""",
          'defined-type': "vz-augmented.alarm.model.ut:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'ut-types:TRMT': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'TRMT': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'NOFIELD_': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:TRMT': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:BTH': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:BTH': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:NA': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:RCV': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:NOFIELD_': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:NOFIELD_': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'NA': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:RCV': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:NA': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'BTH': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'RCV': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}},), is_leaf=True, yang_name="direction", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='identityref', is_config=True)""",
        })

    self.__direction = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_direction(self):
    self.__direction = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'ut-types:TRMT': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'TRMT': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'NOFIELD_': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:TRMT': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:BTH': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:BTH': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:NA': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:RCV': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:NOFIELD_': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'vz-al-types:NOFIELD_': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'NA': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:RCV': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'ut-types:NA': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'BTH': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}, u'RCV': {u'@namespace': u'urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut-types', u'@module': u'vz-augmented.alarm.model.ut-types'}},), is_leaf=True, yang_name="direction", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='identityref', is_config=True)


  def _get_HiSeverityNotificationCode(self):
    """
    Getter method for HiSeverityNotificationCode, mapped from YANG variable /alarm_system/alarms/alarm/state/HiSeverityNotificationCode (string)

    YANG Description: High Severity Notification Code
    """
    return self.__HiSeverityNotificationCode
      
  def _set_HiSeverityNotificationCode(self, v, load=False):
    """
    Setter method for HiSeverityNotificationCode, mapped from YANG variable /alarm_system/alarms/alarm/state/HiSeverityNotificationCode (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_HiSeverityNotificationCode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_HiSeverityNotificationCode() directly.

    YANG Description: High Severity Notification Code
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="HiSeverityNotificationCode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """HiSeverityNotificationCode must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="HiSeverityNotificationCode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)""",
        })

    self.__HiSeverityNotificationCode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_HiSeverityNotificationCode(self):
    self.__HiSeverityNotificationCode = YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="HiSeverityNotificationCode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)


  def _get_LoSeverityNotificationCode(self):
    """
    Getter method for LoSeverityNotificationCode, mapped from YANG variable /alarm_system/alarms/alarm/state/LoSeverityNotificationCode (string)

    YANG Description: Low Severity Notification Code
    """
    return self.__LoSeverityNotificationCode
      
  def _set_LoSeverityNotificationCode(self, v, load=False):
    """
    Setter method for LoSeverityNotificationCode, mapped from YANG variable /alarm_system/alarms/alarm/state/LoSeverityNotificationCode (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_LoSeverityNotificationCode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_LoSeverityNotificationCode() directly.

    YANG Description: Low Severity Notification Code
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="LoSeverityNotificationCode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """LoSeverityNotificationCode must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="LoSeverityNotificationCode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)""",
        })

    self.__LoSeverityNotificationCode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_LoSeverityNotificationCode(self):
    self.__LoSeverityNotificationCode = YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="LoSeverityNotificationCode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)


  def _get_ServiceEffect(self):
    """
    Getter method for ServiceEffect, mapped from YANG variable /alarm_system/alarms/alarm/state/ServiceEffect (string)

    YANG Description: Effect of Alarm on Service
    """
    return self.__ServiceEffect
      
  def _set_ServiceEffect(self, v, load=False):
    """
    Setter method for ServiceEffect, mapped from YANG variable /alarm_system/alarms/alarm/state/ServiceEffect (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ServiceEffect is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ServiceEffect() directly.

    YANG Description: Effect of Alarm on Service
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="ServiceEffect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ServiceEffect must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="ServiceEffect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)""",
        })

    self.__ServiceEffect = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ServiceEffect(self):
    self.__ServiceEffect = YANGDynClass(base=six.text_type, default=six.text_type("not applicable"), is_leaf=True, yang_name="ServiceEffect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:onf:params:xml:ns:yang:vz-augmented.alarm.model.ut', defining_module='vz-augmented.alarm.model.ut', yang_type='string', is_config=True)

  id = __builtin__.property(_get_id, _set_id)
  resource = __builtin__.property(_get_resource, _set_resource)
  text = __builtin__.property(_get_text, _set_text)
  time_created = __builtin__.property(_get_time_created, _set_time_created)
  severity = __builtin__.property(_get_severity, _set_severity)
  type_id = __builtin__.property(_get_type_id, _set_type_id)
  layer = __builtin__.property(_get_layer, _set_layer)
  device_profile = __builtin__.property(_get_device_profile, _set_device_profile)
  tid = __builtin__.property(_get_tid, _set_tid)
  object_name = __builtin__.property(_get_object_name, _set_object_name)
  alarm_ref_id = __builtin__.property(_get_alarm_ref_id, _set_alarm_ref_id)
  type = __builtin__.property(_get_type, _set_type)
  class_ = __builtin__.property(_get_class_, _set_class_)
  equipment = __builtin__.property(_get_equipment, _set_equipment)
  AID = __builtin__.property(_get_AID, _set_AID)
  condition_type = __builtin__.property(_get_condition_type, _set_condition_type)
  location = __builtin__.property(_get_location, _set_location)
  direction = __builtin__.property(_get_direction, _set_direction)
  HiSeverityNotificationCode = __builtin__.property(_get_HiSeverityNotificationCode, _set_HiSeverityNotificationCode)
  LoSeverityNotificationCode = __builtin__.property(_get_LoSeverityNotificationCode, _set_LoSeverityNotificationCode)
  ServiceEffect = __builtin__.property(_get_ServiceEffect, _set_ServiceEffect)


  _pyangbind_elements = OrderedDict([('id', id), ('resource', resource), ('text', text), ('time_created', time_created), ('severity', severity), ('type_id', type_id), ('layer', layer), ('device_profile', device_profile), ('tid', tid), ('object_name', object_name), ('alarm_ref_id', alarm_ref_id), ('type', type), ('class_', class_), ('equipment', equipment), ('AID', AID), ('condition_type', condition_type), ('location', location), ('direction', direction), ('HiSeverityNotificationCode', HiSeverityNotificationCode), ('LoSeverityNotificationCode', LoSeverityNotificationCode), ('ServiceEffect', ServiceEffect), ])


class yc_alarm_alarm_system__alarm_system_alarms_alarm(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module alarm-system - based on the path /alarm-system/alarms/alarm. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of alarms, keyed by a unique id
  """
  __slots__ = ('_path_helper', '_extmethods', '__id','__state',)

  _yang_name = 'alarm'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_alarm_system__alarm_system_alarms_alarm_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='container', is_config=True)
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'alarm-system', u'alarms', u'alarm']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /alarm_system/alarms/alarm/id (leafref)

    YANG Description: References the unique alarm id
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /alarm_system/alarms/alarm/id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: References the unique alarm id
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='leafref', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='leafref', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /alarm_system/alarms/alarm/state (container)

    YANG Description: Operational state data for a device alarm
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /alarm_system/alarms/alarm/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for a device alarm
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_alarm_system__alarm_system_alarms_alarm_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_alarm_system__alarm_system_alarms_alarm_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_alarm_system__alarm_system_alarms_alarm_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='container', is_config=True)

  id = __builtin__.property(_get_id, _set_id)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('id', id), ('state', state), ])


class yc_alarms_alarm_system__alarm_system_alarms(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module alarm-system - based on the path /alarm-system/alarms. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for device alarms
  """
  __slots__ = ('_path_helper', '_extmethods', '__alarm',)

  _yang_name = 'alarms'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__alarm = YANGDynClass(base=YANGListType("id",yc_alarm_alarm_system__alarm_system_alarms_alarm, yang_name="alarm", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id', extensions=None), is_container='list', yang_name="alarm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'alarm-system', u'alarms']

  def _get_alarm(self):
    """
    Getter method for alarm, mapped from YANG variable /alarm_system/alarms/alarm (list)

    YANG Description: List of alarms, keyed by a unique id
    """
    return self.__alarm
      
  def _set_alarm(self, v, load=False):
    """
    Setter method for alarm, mapped from YANG variable /alarm_system/alarms/alarm (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_alarm is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_alarm() directly.

    YANG Description: List of alarms, keyed by a unique id
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("id",yc_alarm_alarm_system__alarm_system_alarms_alarm, yang_name="alarm", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id', extensions=None), is_container='list', yang_name="alarm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """alarm must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("id",yc_alarm_alarm_system__alarm_system_alarms_alarm, yang_name="alarm", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id', extensions=None), is_container='list', yang_name="alarm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='list', is_config=True)""",
        })

    self.__alarm = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_alarm(self):
    self.__alarm = YANGDynClass(base=YANGListType("id",yc_alarm_alarm_system__alarm_system_alarms_alarm, yang_name="alarm", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id', extensions=None), is_container='list', yang_name="alarm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='list', is_config=True)

  alarm = __builtin__.property(_get_alarm, _set_alarm)


  _pyangbind_elements = OrderedDict([('alarm', alarm), ])


class yc_alarm_system_alarm_system__alarm_system(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module alarm-system - based on the path /alarm-system. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__alarms',)

  _yang_name = 'alarm-system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__alarms = YANGDynClass(base=yc_alarms_alarm_system__alarm_system_alarms, is_container='container', yang_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'alarm-system']

  def _get_alarms(self):
    """
    Getter method for alarms, mapped from YANG variable /alarm_system/alarms (container)

    YANG Description: Top-level container for device alarms
    """
    return self.__alarms
      
  def _set_alarms(self, v, load=False):
    """
    Setter method for alarms, mapped from YANG variable /alarm_system/alarms (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_alarms is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_alarms() directly.

    YANG Description: Top-level container for device alarms
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_alarms_alarm_system__alarm_system_alarms, is_container='container', yang_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """alarms must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_alarms_alarm_system__alarm_system_alarms, is_container='container', yang_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='container', is_config=True)""",
        })

    self.__alarms = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_alarms(self):
    self.__alarms = YANGDynClass(base=yc_alarms_alarm_system__alarm_system_alarms, is_container='container', yang_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='container', is_config=True)

  alarms = __builtin__.property(_get_alarms, _set_alarms)


  _pyangbind_elements = OrderedDict([('alarms', alarms), ])


class alarm_system(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module alarm-system - based on the path /alarm-system. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Model for managing system-wide services and functions on
network devices.

Portions of this code were derived from IETF RFC 7317.
Please reproduce this note if possible.

IETF code is subject to the following copyright and license:
Copyright (c) IETF Trust and the persons identified as authors of
the code.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, is permitted pursuant to, and subject to the license
terms contained in, the Simplified BSD License set forth in
Section 4.c of the IETF Trust's Legal Provisions Relating
to IETF Documents (http://trustee.ietf.org/license-info).
  """
  __slots__ = ('_path_helper', '_extmethods', '__alarm_system',)

  _yang_name = 'alarm-system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__alarm_system = YANGDynClass(base=yc_alarm_system_alarm_system__alarm_system, is_container='container', yang_name="alarm-system", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return []

  def _get_alarm_system(self):
    """
    Getter method for alarm_system, mapped from YANG variable /alarm_system (container)
    """
    return self.__alarm_system
      
  def _set_alarm_system(self, v, load=False):
    """
    Setter method for alarm_system, mapped from YANG variable /alarm_system (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_alarm_system is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_alarm_system() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_alarm_system_alarm_system__alarm_system, is_container='container', yang_name="alarm-system", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """alarm_system must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_alarm_system_alarm_system__alarm_system, is_container='container', yang_name="alarm-system", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='container', is_config=True)""",
        })

    self.__alarm_system = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_alarm_system(self):
    self.__alarm_system = YANGDynClass(base=yc_alarm_system_alarm_system__alarm_system, is_container='container', yang_name="alarm-system", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/system', defining_module='alarm-system', yang_type='container', is_config=True)

  alarm_system = __builtin__.property(_get_alarm_system, _set_alarm_system)


  _pyangbind_elements = OrderedDict([('alarm_system', alarm_system), ])


